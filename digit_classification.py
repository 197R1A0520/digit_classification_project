# -*- coding: utf-8 -*-
"""digit_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fevsRlJ7BnmRfpqhGUB8hD3vckMJvjCK
"""

#importing libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd


#importing datasets
df= pd.read_csv("/content/digit_svm (1).csv")
print(df)

# EDA

#1.head of the dataset
print(df.head())
print(df.tail())
print(df.sample(10))


#2.the shape of the dataset
print(df.shape)


#3.list types of all columns
print(df.dtypes)


#4.info of the dataset
print(df.info())


#5.summary of the dataset
print(df.describe())


# DATA CLEANING
#1.drop the duplicates
print(df.shape)
df=df.drop_duplicates()
print(df.shape)


#2.check the NULL values
print(df.isnull().sum())
print(df.columns)

df=df.dropna()
print(df)

#i have to cross checked that given images are correct or not
#partation data in x and y and convert them numpy matrix
#numpy matrix used to hold the pixel values
#Extracting Independent and dependent Variable

x= df.iloc[:,1:].values
print(x.shape)
y= df.iloc[:,0:1].values
print(y.shape)
print(x)
print(y)

#now cross check about the images
#image label in side y and image pixel value are inside x
#but they are sharing the same index
#i have selected index=2 we know in the dataframe on index 2 we have 1
var = x[8]
print(var)
print(y[8])


##showing the image using matplotlib
plt.imshow(var.reshape(28,28),cmap='gray')
plt.show()


#find where the digit 7,return its index
var1 = np.where(y==7)
print(var1)


#find the image of 3 and 9
def show_image(index):
 var=x[index]
 plt.title("digit inside image is"+str(y[index]))
 plt.imshow(var.reshape(28,28),cmap='gray')
 plt.show()
show_image(41980)


# Splitting the dataset into training and test set.
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size= 0.4,random_state=8)
print(x_test)

#support vector machine algorithm
from sklearn.svm import SVC
clf = SVC(kernel='linear',random_state=0)
clf.fit(x_train,y_train)
print(clf)


# #Predicting the test set result
y_pred = clf.predict(x_test)


# #Creating the Confusion matrix
from sklearn.metrics import confusion_matrix
cm= confusion_matrix(y_test,y_pred)
print(cm)


#classification matrics
from sklearn.metrics import accuracy_score
acc = accuracy_score(y_test,y_pred)
print(acc*100)